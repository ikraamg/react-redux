{"version":3,"sources":["Components/LoadingAnim.js","styles/AppBar.module.scss","styles/LoadingAnim.module.scss","serviceWorker.js","Components/AppBar.js","Containers/App.js","reducers/filter.js","reducers/items.js","reducers/entry.js","reducers/root.js","index.js"],"names":["CircularIndeterminate","className","styles","position","module","exports","Boolean","window","location","hostname","match","ButtonAppBar","AppBar","Toolbar","flex","IconButton","edge","color","aria-label","href","Button","Typography","variant","ItemList","lazy","App","fallback","LoadingAnim","path","filterReducer","state","action","type","category","itemReducer","data","entryReducer","rootReducer","combineReducers","items","entries","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mIAAA,+EAIe,SAASA,IACtB,OACE,yBAAKC,UAAWC,IAAOC,UACrB,kBAAC,IAAD,S,mBCNNC,EAAOC,QAAU,CAAC,KAAO,uB,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,gC,kLCWTC,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2D,0HCRS,SAASC,IACtB,OACE,kBAACC,EAAA,EAAD,CAAQT,SAAS,UACf,kBAACU,EAAA,EAAD,CAASZ,UAAWC,IAAOY,MACzB,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,aAAW,OAAOC,KAAK,gBAC9D,kBAAC,IAAD,OAGF,kBAACC,EAAA,EAAD,CAAQD,KAAK,eAAeF,MAAM,WAChC,kBAACI,EAAA,EAAD,CAAYC,QAAQ,MAApB,iBAGF,kBAACP,EAAA,EAAD,CAAYC,KAAK,MAAMC,MAAM,UAAUC,aAAW,OAAOC,KAAK,gBAC5D,kBAAC,IAAD,S,YCbJI,EAAWC,gBAAK,kBAAM,uDAEb,SAASC,IACtB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAUC,eAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,aACV,kBAACL,EAAD,OAEF,kBAAC,IAAD,CAAOK,KAAK,KACV,kBAACL,EAAD,WCvBd,IAOeM,EAPO,WAA4B,IAA3BC,EAA0B,uDAAlB,MAAOC,EAAW,uCAC/C,MAAoB,kBAAhBA,EAAOC,KACH,GAAN,OAAUD,EAAOE,UAEZH,GCOMI,EAXK,WAAyB,IAAxBJ,EAAuB,uDAAf,GAAIC,EAAW,uCAC1C,OAAQA,EAAOC,MACb,IAAK,oBACH,MAAO,CACLD,EAAOI,MAEX,QACE,OAAOL,ICIEM,EAXM,WAAyB,IAAxBN,EAAuB,uDAAf,GAAIC,EAAW,uCAC3C,OAAQA,EAAOC,MACb,IAAK,iBACH,MAAO,CACLD,EAAOI,MAEX,QACE,OAAOL,ICKEO,EAPKC,YAAgB,CAClCC,MAAOL,EACPD,SAAUJ,EACVW,QAASJ,ICELK,EAAQC,YAAYL,EAAaM,YAAgBC,MAEvDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SPiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.58c61125.chunk.js","sourcesContent":["import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport styles from '../styles/LoadingAnim.module.scss';\n\nexport default function CircularIndeterminate() {\n  return (\n    <div className={styles.position}>\n      <CircularProgress />\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flex\":\"AppBar_flex__W2P2d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"position\":\"LoadingAnim_position__3uj8b\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { Button } from '@material-ui/core/';\nimport styles from '../styles/AppBar.module.scss';\n\nexport default function ButtonAppBar() {\n  return (\n    <AppBar position=\"static\">\n      <Toolbar className={styles.flex}>\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" href=\"/react-redux\">\n          <SettingsIcon />\n        </IconButton>\n\n        <Button href=\"/react-redux\" color=\"inherit\">\n          <Typography variant=\"h6\">API Explorer</Typography>\n        </Button>\n\n        <IconButton edge=\"end\" color=\"inherit\" aria-label=\"menu\" href=\"/react-redux\">\n          <SearchIcon />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import React, { lazy, Suspense } from 'react';\nimport './App.scss';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport AppBar from '../Components/AppBar';\nimport LoadingAnim from '../Components/LoadingAnim';\n\nconst ItemList = lazy(() => import('./ItemList'));\n\nexport default function App() {\n  return (\n    <div>\n      <AppBar />\n      <Router>\n        <Suspense fallback={LoadingAnim()}>\n          <Switch>\n            <Route path=\"/itemList\">\n              <ItemList />\n            </Route>\n            <Route path=\"/\">\n              <ItemList />\n            </Route>\n          </Switch>\n        </Suspense>\n      </Router>\n    </div>\n  );\n}\n","const filterReducer = (state = 'All', action) => {\n  if (action.type === 'CHANGE_FILTER') {\n    return `${action.category}`;\n  }\n  return state;\n};\n\nexport default filterReducer;\n","const itemReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'UPDATE_CATEGORIES':\n      return [\n        action.data,\n      ];\n    default:\n      return state;\n  }\n};\n\nexport default itemReducer;\n","const entryReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'UPDATE_ENTRIES':\n      return [\n        action.data,\n      ];\n    default:\n      return state;\n  }\n};\n\nexport default entryReducer;\n","import { combineReducers } from 'redux';\nimport filterReducer from './filter';\nimport itemReducer from './items';\nimport entryReducer from './entry';\n\nconst rootReducer = combineReducers({\n  items: itemReducer,\n  category: filterReducer,\n  entries: entryReducer,\n\n});\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\nimport App from './Containers/App';\nimport rootReducer from './reducers/root';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}